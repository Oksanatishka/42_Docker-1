# Launch a container name Abathur. It will be a Python container, 2-slim version,
# its /root folder will be bound to a HOME folder on your host, and its 3000 port
# will be bound to the 3000 port of your virtual machine.
# You will personalize this container so that you can use the Flask micro-framework
# in its latest version. You will make sure that an html page displaying "Hello World"
# with <h1> tags can be served by Flask. You will test that your container is
# properly set up by accessing, via curl or a web browser, the IP address of your
# virtual machine on the 3000 port.
# You will also list all the necessary commands in your repository.

docker run -d -p 3000:3000 --name Abathur -v /home/docker/:/root -e FLASK_APP=app.py -w /root python:2-slim bash -c "pip install flask && flask run -h 0.0.0.0 -p 3000"
docker cp app.py Abathur:/root
docker start Abathur

# pip install flask     to install Flask
# flask run             To run the application
# --host=0.0.0.0        to make the server publicly available
# start                 Start one or more stopped containers
# cp                    Copy files/folders between a container and the local filesystem

# A minimal Flask application looks something like this:

# from flask import Flask
# app = Flask(__name__)
#
# @app.route('/')
# def hello_world():
#    return 'Hello, World!'

# To check run 
# curl $(docker-machine ip Char):3000
# OR http://192.168.99.100:3000/

# man curl:
# curl is a tool to transfer data from or to a server, using one of the supported protocols (DICT, FILE, FTP, 
# FTPS, GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMB, SMBS, SMTP, 
# SMTPS, TELNET and TFTP). The command is designed to work without user interaction.